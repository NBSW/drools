<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">


    <!-- 代码调用线程池处理规则任务执行结果 -->
    <task:executor id="kpiResultExecutor" pool-size="50" queue-capacity="128" keep-alive="300" rejection-policy="CALLER_RUNS"/>

    <!-- 代码调用线程池处理规则任务执行结果 -->
    <task:executor id="groupTaskExecutor" pool-size="50" queue-capacity="128" keep-alive="300" rejection-policy="CALLER_RUNS"/>

    <!-- 代码调用线程池处理规则任务Service -->
    <task:executor id="droolsTaskExecutor" pool-size="50" queue-capacity="128" keep-alive="300" rejection-policy="CALLER_RUNS"/>

    <!-- 代码调用线程池处理汇总任务Service -->
    <task:executor id="summaryTaskExecutor" pool-size="50" queue-capacity="128" keep-alive="300" rejection-policy="CALLER_RUNS"/>

    <!-- 代码调用线程池处理调度任务 -->
    <task:executor id="schedulerTaskExecutor" pool-size="50" queue-capacity="128" keep-alive="300" rejection-policy="CALLER_RUNS"/>

    <!-- 框架注解使用线程池 -->
    <task:scheduler id="scheduler" pool-size="50"/>
    <task:annotation-driven executor="schedulerTaskExecutor" scheduler="scheduler"/>
    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <bean id="jdbcTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <bean id="ruleResultJDBCTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
        <property name="fetchSize" value="${jdbc.default.fetch.size}"/>
        <property name="maxRows" value="${jdbc.default.max.row}"/>
    </bean>
</beans>